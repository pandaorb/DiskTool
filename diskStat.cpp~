#include<iostream>
#include<fstream>
#include<string>
#include<cstdlib>

#include "diskStat.h"
using namespace std;

string DiskStat::getDiskName()
{
	return diskName;
}

void DiskStat::setDiskName(string newDiskName)
{
	diskName = newDiskName;
}

unsigned long DiskStat::getBlkRead()
{
	return blkRead;
}

void DiskStat::setBlkRead(unsigned long newBlkRead)
{
	blkRead = newBlkRead;
}

unsigned long DiskStat::getBlkReadS()
{
	return blkReadS;
}

void DiskStat::setBlkReadS(unsigned long newBlkReadS)
{
	blkReadS = newBlkReadS;
}

unsigned long DiskStat::getBlkWrtn()
{
	return blkWrtn;
}

void DiskStat::setBlkWrtn(unsigned long newBlkWrtn)
{
	blkWrtn = newBlkWrtn;
}

unsigned long DiskStat::getBlkWrtnS()
{
	return blkWrtnS;
}

void DiskStat::setBlkWrtnS(unsigned long newBlkWrtnS)
{
	blkWrtnS = newBlkWrtnS;
}

unsigned long DiskStat::getKbReadS()
{
	return kbReadS;
}

void DiskStat::setKbReadS(unsigned long newKbReadS)
{
	kbReadS = newKbReadS;
}

unsigned long DiskStat::getKbWrtnS()
{
	return kbWrtnS;
}

void DiskStat::setKbWrtnS(unsigned long newKbWrtnS)
{
	kbWrtnS = newKbWrtnS;
}

void DiskStat::getDiskInfo()
{
	ifstream infile;
	infile.open("/proc/diskstats");
	string allStats;
	while(!infile.eof())
	{
		allStats += infile.get();
	}
	diskName = "sda";
	unsigned int diskPosition = allStats.find(diskName);
	unsigned int endDiskPos = allStats.find("\n", diskPosition);
	unsigned int diskDataLength = endDiskPos - diskPosition;
	string diskData = allStats.substr(diskPosition, diskDataLength); 
	//cout << diskData << endl;
	
	unsigned int startPosition = 0;
	unsigned int endPosition = 0;	
	unsigned int readLength = 0;

	//blkRead - field 1
	blkRead = getBlockData(diskData, startPosition, endPosition);

	//discard - field 2
	getBlockData(diskData, startPosition, endPosition);

	//blkReadS - field 3
	blkReadS = getBlockData(diskData, startPosition, endPosition);

	//discard - field 4
	getBlockData(diskData, startPosition, endPosition);

	//blkWrtn - field 5
	blkWrtn = getBlockData(diskData, startPosition, endPosition);
	
	//discard - field 6
	getBlockData(diskData, startPosition, endPosition);
	
	//blkWrtnS - field 7
	blkWrtnS = getBlockData(diskData, startPosition, endPosition);
}

unsigned long DiskStat::getBlockData(string diskData, unsigned int& startPosition, unsigned int& endPosition)
{

	startPosition = endPosition;
	unsigned int readLength;

	startPosition = diskData.find(" ", startPosition);
	endPosition = diskData.find(" ", startPosition + 1);
	readLength = endPosition - startPosition;
	string blkInfo = diskData.substr(startPosition, readLength);
	unsigned long blkData = atoi(blkInfo.c_str());
	return blkData;
}
